Запись		Базовый вирт. адрес		Указывает на(логически)
1023		0xffc00000										
1022		0xff800000				
1021		0xff400000				
1020		0xff000000				
					Таблицы страниц 

..
3			0х00с00000				
2			0х00800000
1 			0х00400000
0			0x00000000

Вопрос1: Мы поместили пользовательское окружение и окружение ядра в одном адресном пространстве. 
Почему пользовательские программы не смогут читать или писать в память ядра? 
Какие конкретные механизмы защищают память ядра?

Так как мы для каждой страницы указываем флаги прав доступа, то пользователи не смогут обращаться 
к страницам, на которых не установлен соответствующий флаг.
Этот механизм называется страничным механизмом защиты.

Вопрос2: Каков максимальный объем физической памяти, который данная операционная система может поддерживать? Почему?

Максимальный объем памяти, которая поддерживает операционная система это 0хFFFFFFFF - 0xF0000000, это есть 256 мб.

Вопрос3: Сколько дополнительных затрат памяти потребовалось бы для управления памятью, если мы на самом деле имели максимальный объем физической памяти? На какие части эти накладные расходы разбиты?

Дополнительная память потрачена на:
	структуры PageInfo
	Page Directory
	Талблицы страниц

Вопрос4: Изучите еще раз механизм настройки таблицы страниц в kern/entry.S и в kern/entrypgdir.c. Сразу после включения страничной организации памяти EIP по-прежнему имеет низкое значение (чуть более 1 МБ). В какой точке мы переходим к использованию EIP выше KERNBASE? Что делает возможным продолжение выполнения с низким EIP между моментом, когда мы включаем страничную организацию, и моментом, когда мы начинаем использовать EIP выше KERNBASE? Почему этот переход необходим?

Здесь мы переходим к EIP выше KERNBASE: 
	kern/entry.S:
		mov	$relocated, %eax
		jmp	*%eax
Выполнение возможно с низким EIP в момент между включением страничной организации и использованием высокого EIP, по причине того, что мы разметили память ниже KERNBASE таким образом, чтобы это было возможно.
