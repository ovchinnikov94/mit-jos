Вопрос: Какова цель наличия отдельных функций-обработчиков для каждого исключения/прерывания? (То есть, если бы все исключения/прерывания доставлялись одному и тому же обработчику, какая функция, присутствующая в текущей реализации, не могла бы быть реализована?)

Функция trap_dispatch() не смогла бы быть реализована, потому что в таком случае, было бы не понятно, какое именно прерывание пришло.

Вопрос: Нужно ли было что-либо делать, чтобы программа user/softint работала правильно? Скрипт проверки ожидает, что она создаст общую ошибку защиты (ловушка 13), но в коде softint int $14. Почему она фактически будет создавать исключение с вектором 13? Что произойдет, если ядро ​​фактически позволит инструкции int $14 softint запустить обработчик ошибок ядра (с вектором прерывания 14)?

Тест точки останова будет либо генерировать исключение точки останова, либо общую ошибку защиты в зависимости от того, как вы инициализировали точку входа в точку останова в IDT (то есть в зависимости от вашего вызова SETGATE из trap_init). Почему? Как нужно настроить его для того, чтобы заставить точку останова работать как описано выше, и какая неправильная настройка будет вызывать общую ошибку защиты?

Каков, по-вашему, смысл этих механизмов, особенно в свете того, что делает программа user/softint?
Edit

